{"version":3,"sources":["reportWebVitals.js","logo.svg","graphql/Query.js","graphql/Mutation.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GET_NAMES","gql","SUBMIT_NAME","App","useQuery","namesLoading","loading","namesError","error","namesData","data","namesRefetch","refetch","useMutation","submitname","useState","name","setName","handleSubmit","event","a","preventDefault","RegExp","test","variables","alert","className","onSubmit","type","value","onChange","target","getNames","map","na","index","require","config","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","restore","wrappedApp","ReactDOM","render","document","getElementById"],"mappings":"qQAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,4CCPC,I,sCCEFQ,EAAaC,IAAJ,kECATC,EAAaD,IAAF,8H,OCwDTE,MAjDf,WAAgB,IAAD,EAMTC,YAASJ,GAJFK,EAFE,EAEXC,QACOC,EAHI,EAGXC,MACMC,EAJK,EAIXC,KACSC,EALE,EAKXC,QALW,EAOQC,YAAYX,GAA1BY,EAPM,sBAQWC,mBAAS,IARpB,mBAQNC,EARM,KAQAC,EARA,KAUPC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDACnBD,EAAME,kBACQ,IAAIC,OAAO,kBACfC,KAAKP,GAHI,iCAIEF,EAAW,CAC5BU,UAAU,CACRR,KAAMA,KANO,cASjBC,EAAQ,IACRN,IAViB,wBAYjBc,MAAM,6DAZW,4CAAH,sDAqBlB,OACE,sBAAKC,UAAU,MAAf,UACE,uBAAMC,SAAUT,EAAhB,UACE,gDAAyB,uBACzB,uBAAOU,KAAK,OAAOC,MAAOb,EAAMc,SARjB,SAACX,GACpBF,EAAQE,EAAMY,OAAOF,UAQjB,uBAAOD,KAAK,SAASC,MAAM,cAE7B,8BACExB,EACC,8CACDE,EACC,4CACAE,EAAUuB,SAASC,KAAI,SAACC,EAAIC,GAAL,OAAe,iCAAmBD,EAAG,yBAAXC,YCvC1DC,EAAQ,IAAUC,SAElB,IAAMC,EAAW,IAAIC,IAAS,CAC5BC,IAAK,2CAIDC,EAAS,IAAIC,IAAc,CAC/BF,IAAK,uCACLG,QAAS,CAAEC,WAAW,KAKlBC,EAAOC,aAEX,YAAgB,IAAbC,EAAY,EAAZA,MACKC,EAAaC,YAAkBF,GACrC,MACsB,wBAApBC,EAAWE,MACc,iBAAzBF,EAAWG,YAGfV,EACAH,GAGIc,EAAS,IAAIC,IAAa,CAC9BR,OACAS,OAAO,IAAIC,KAAgBC,QAAQ,MAG/BC,EACJ,cAAC,IAAD,CAAgBL,OAAQA,EAAxB,SACE,cAAC,EAAD,MAIJM,IAASC,OAAOF,EAAYG,SAASC,eAAe,SAKpDtE,M","file":"static/js/main.7b902a1c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import { gql } from 'apollo-boost'\r\n\r\nexport const GET_NAMES =  gql`\r\n  query getNames{\r\n    getNames\r\n  }\r\n`\r\n","import { gql } from 'apollo-boost'\r\n\r\nexport const SUBMIT_NAME= gql`\r\n  mutation submitName(\r\n    $name: String!\r\n  ){\r\n    submitName(\r\n      name: $name\r\n    )\r\n  }\r\n`\r\n","import React, { useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport { useQuery, useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_NAMES } from './graphql/Query'\r\nimport { SUBMIT_NAME } from './graphql/Mutation'\r\n\r\nfunction App() {\r\n  const {\r\n    loading: namesLoading,\r\n    error: namesError,\r\n    data: namesData,\r\n    refetch: namesRefetch\r\n  } = useQuery(GET_NAMES)\r\n  const [submitname] = useMutation(SUBMIT_NAME)\r\n  const [name, setName] = useState('')\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault()\r\n    const regex = new RegExp('^[a-zA-Z0-9]*$')\r\n    if (regex.test(name)) {\r\n      const data = await submitname({\r\n        variables:{\r\n          name: name\r\n        }\r\n      })\r\n      setName('')\r\n      namesRefetch()\r\n    } else {\r\n      alert(\"please enter a valid name(with only letters and numbers).\")\r\n    }\r\n\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    setName(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <form onSubmit={handleSubmit}>\r\n        <span>enter a name</span><br/>\r\n        <input type=\"text\" value={name} onChange={handleChange} />\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n      <div>{\r\n        namesLoading ?\r\n        (<span>Loading...</span>) :\r\n        namesError ?\r\n        (<span>Error...</span>) :\r\n        (namesData.getNames.map((na, index) => <span key={index}>{na}<br/></span>))\r\n      }</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { ApolloClient, InMemoryCache } from 'apollo-boost'\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport { split } from 'apollo-link'\r\nimport { HttpLink } from 'apollo-link-http'\r\nimport { WebSocketLink } from 'apollo-link-ws'\r\nimport { getMainDefinition } from 'apollo-utilities'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nrequire('dotenv').config()\r\n// Create an http link:\r\nconst httpLink = new HttpLink({\r\n  uri: 'https://' + process.env.REACT_APP_BACKEND_URL + '/'\r\n})\r\n\r\n// Create a WebSocket link:\r\nconst wsLink = new WebSocketLink({\r\n  uri: 'wss://' + process.env.REACT_APP_BACKEND_URL + '/',\r\n  options: { reconnect: true }\r\n})\r\n\r\n// using the ability to split links, you can send data to each link\r\n// depending on what kind of operation is being sent\r\nconst link = split(\r\n  // split based on operation type\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query)\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    )\r\n  },\r\n  wsLink,\r\n  httpLink\r\n)\r\n\r\nconst client = new ApolloClient({\r\n  link,\r\n  cache: new InMemoryCache().restore({})\r\n})\r\n\r\nconst wrappedApp = (\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>\r\n)\r\n\r\nReactDOM.render(wrappedApp, document.getElementById('root'))\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}